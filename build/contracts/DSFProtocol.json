{
  "contractName": "DSFProtocol",
  "abi": [],
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/Users/brianwheeler/optimum/protocol/contracts/DSFProtocol.sol\":\"DSFProtocol\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/brianwheeler/optimum/protocol/contracts/DSFProtocol.sol\":{\"keccak256\":\"0x0a06d913ceefdadafb7b2f00ce27b98df16f6bbb7b06ee847160276cdbeececc\",\"urls\":[\"bzz-raw://7931984e926d3c6688932501a0c5d8b145b5af5159d23f6f6059e09b570f8459\",\"dweb:/ipfs/QmcdkzuF6ZzecJiXAk3ubxo5bTUxXdEw5nfnuWNmdVhCrg\"]},\"/Users/brianwheeler/optimum/protocol/contracts/DSFProtocolTypes.sol\":{\"keccak256\":\"0x8a364fe0b6c304d1030db200ba3f564c93f4e87798c8824102f808b2284433fd\",\"urls\":[\"bzz-raw://ffd0d5658a76561f1ff97f32cc28ec2779a4f91ac669ec174c670f424b800ed7\",\"dweb:/ipfs/QmUScBiySz2E7ikaFnpijvdgLuactjZtqPU7f3qBdL3Kpf\"]}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b50603e80601d6000396000f3fe6080604052600080fdfea265627a7a723158205995bd74672a574c9e7197811505c8aea37be871d8fb6771bf001746ed80eade64736f6c63430005100032",
  "deployedBytecode": "0x6080604052600080fdfea265627a7a723158205995bd74672a574c9e7197811505c8aea37be871d8fb6771bf001746ed80eade64736f6c63430005100032",
  "sourceMap": "188:10766:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;188:10766:0;;;;;;;",
  "deployedSourceMap": "188:10766:0:-;;;;;",
  "source": "pragma solidity ^0.5;\n\n// import \"./ERC20.sol\";\n// import \"./OptionToken.sol\";\n// import \"./VariableSupplyToken.sol\";\nimport \"./DSFProtocolTypes.sol\";\n// import \"./BidderInterface.sol\";\n\n\ncontract DSFProtocol is DSFProtocolTypes {\n    \n    // string public constant VERSION = \"1.0\";\n    \n    // ERC20 public usd;\n    // ERC20 public protocolToken;\n\n    // uint public constant DURATION = 12 hours;\n    // uint public constant HALF_DURATION = DURATION / 2;\n\n    // mapping(address => uint) public openInterest;\n    // mapping(address => uint) public earlyExercised;\n    // mapping(address => uint) public totalInterest;\n    // mapping(address => mapping(address => uint)) public writers;\n    // mapping(address => OptionSeries) public seriesInfo;\n    // mapping(address => uint) public holdersSettlement;\n\n    // mapping(address => uint) public expectValue;\n    // bool isAuction;\n    \n    \n    // uint public constant PREFERENCE_MAX = 0.037 ether;\n\n    // constructor(address _token, address _usd) public {\n    //     protocolToken = ERC20(_token);\n    //     usd = ERC20(_usd);\n    // }\n\n    // function() external payable {\n    //     revert();\n    // }\n\n    // event OptionTokenCreated(address token);\n    // // Note, this just creates an option token, it doesn't guarantee\n    // // settlement of that token. For guaranteed settlement see the DSFProtocolProxy contract(s)\n    // function issue(string memory name, string memory symbol, uint expiration, Flavor flavor, uint strike) public returns (address) {\n    //     require(expiration > now);\n    //     require(strike > 1 ether);\n    //     address series = address(new OptionToken(name, symbol));\n    //     seriesInfo[series] = OptionSeries(expiration, flavor, strike);\n    //     emit OptionTokenCreated(series);\n    //     return series;\n    // }\n\n    // function open(address _series, uint amount) public payable returns (bool) {\n    //     OptionSeries memory series = seriesInfo[_series];\n    //     require(now < series.expiration);\n\n    //     if (series.flavor == Flavor.Call) {\n    //         require(msg.value == amount);\n    //     } else {\n    //         require(msg.value == 0);\n    //         uint escrow = amount * series.strike;\n    //         require(escrow / amount == series.strike);\n    //         escrow /= 1 ether;\n    //         require(usd.transferFrom(msg.sender, address(this), escrow));\n    //     }\n        \n    //     VariableSupplyToken(_series).grant(msg.sender, amount);\n\n    //     openInterest[_series] += amount;\n    //     totalInterest[_series] += amount;\n    //     writers[_series][msg.sender] += amount;\n\n    //     return true;\n    // }\n\n    // function close(address _series, uint amount) public returns (bool) {\n    //     OptionSeries memory series = seriesInfo[_series];\n\n    //     require(now < series.expiration);\n    //     require(openInterest[_series] >= amount);\n    //     VariableSupplyToken(_series).burn(msg.sender, amount);\n\n    //     require(writers[_series][msg.sender] >= amount);\n    //     writers[_series][msg.sender] -= amount;\n    //     openInterest[_series] -= amount;\n    //     totalInterest[_series] -= amount;\n        \n    //     if (series.flavor == Flavor.Call) {\n    //         msg.sender.transfer(amount);\n    //     } else {\n    //         usd.transfer(msg.sender, amount * series.strike / 1 ether);\n    //     }\n    //     return true;\n    // }\n    \n    // function exercise(address _series, uint amount) public payable {\n    //     OptionSeries memory series = seriesInfo[_series];\n\n    //     require(now < series.expiration);\n    //     require(openInterest[_series] >= amount);\n    //     VariableSupplyToken(_series).burn(msg.sender, amount);\n\n    //     uint usd = amount * series.strike;\n    //     require(usd / amount == series.strike);\n    //     usd /= 1 ether;\n\n    //     openInterest[_series] -= amount;\n    //     earlyExercised[_series] += amount;\n\n    //     if (series.flavor == Flavor.Call) {\n    //         msg.sender.transfer(amount);\n    //         require(msg.value == 0);\n    //         usd.transferFrom(msg.sender, address(this), usd);\n    //     } else {\n    //         require(msg.value == amount);\n    //         usd.transfer(msg.sender, usd);\n    //     }\n    // }\n    \n    // function receive() public payable returns (bool) {\n    //     require(expectValue[msg.sender] == msg.value);\n    //     expectValue[msg.sender] = 0;\n    //     return true;\n    // }\n\n    // function bid(address _series, uint amount) public payable returns (bool) {\n\n    //     require(isAuction == false);\n    //     isAuction = true;\n\n    //     OptionSeries memory series = seriesInfo[_series];\n\n    //     uint start = series.expiration;\n    //     require(now > start);\n    //     require(now < start + DURATION);\n\n    //     uint elapsed = now - start;\n\n    //     // amount is upper-bounded to open interest of series\n    //     amount = _min(amount, openInterest[_series]);\n\n    //     openInterest[_series] -= amount;\n\n    //     uint offer;\n    //     uint givGet;\n    //     uint discountRate = discount(msg.sender);\n        \n    //     BidderInterface bidder = BidderInterface(msg.sender);\n        \n    //     if (series.flavor == Flavor.Call) {\n    //         require(msg.value == 0);\n\n    //         offer = callAuctionUSDPrice(series.strike, elapsed, discountRate);\n    //         givGet = offer * amount / 1 ether;\n            \n    //         holdersSettlement[_series] += givGet - amount * series.strike / 1 ether;\n\n    //         bool hasFunds = usd.balanceOf(msg.sender) >= givGet && usd.allowance(msg.sender, address(this)) >= givGet;\n\n    //         if (hasFunds) {\n    //             msg.sender.transfer(amount);\n    //         } else {\n    //             bidder.receiveETH(_series, amount);\n    //         }\n\n    //         require(usd.transferFrom(msg.sender, address(this), givGet));\n    //     } else {\n    //         // offer represents the amount the sender will sell eth for in USD\n    //         offer = putAuctionUSDPrice(series.strike, elapsed, discountRate);\n            \n    //         // the amount in USD the sender will receive\n    //         givGet = amount * offer / 1 ether;\n\n    //         holdersSettlement[_series] += amount * series.strike / 1 ether - givGet;\n    //         usd.transfer(msg.sender, givGet);\n\n    //         if (msg.value == 0) {\n    //             require(expectValue[msg.sender] == 0);\n    //             expectValue[msg.sender] = amount;\n                \n    //             bidder.receiveUSD(_series, givGet);\n    //             require(expectValue[msg.sender] == 0);\n    //         } else {\n    //             require(msg.value >= amount);\n    //             msg.sender.transfer(msg.value - amount);\n    //         }\n    //     }\n\n    //     isAuction = false;\n    //     return true;\n    // }\n    \n    // function putAuctionUSDPrice(uint strike, uint elapsed, uint discountRate) public pure returns (uint) {\n    //     uint price = elapsed * strike * 1 ether / (DURATION * discountRate);\n    //     return _min(price, strike);\n    // }\n    \n    // function callAuctionUSDPrice(uint strike, uint elapsed, uint discountRate) public pure returns (uint) {\n    //     uint price = strike * DURATION / elapsed;\n    //     return _max(\n    //         price * discountRate / 1 ether,\n    //         strike\n    //     );\n    // }\n\n    // function redeem(address _series) public returns (uint eth, uint usd) {\n    //     OptionSeries memory series = seriesInfo[_series];\n\n    //     require(now > series.expiration + DURATION);\n\n    //     (eth, usd) = calculateWriterSettlement(writers[_series][msg.sender], _series);\n\n    //     if (eth > 0) {\n    //         msg.sender.transfer(eth);\n    //     }\n\n    //     if (usd > 0) {\n    //         usd.transfer(msg.sender, usd);\n    //     }\n\n    //     return (eth, usd);\n    // }\n\n    // function calculateWriterSettlement(\n    //     uint written,\n    //     address _series\n    // ) public view returns (uint eth, uint usd) {\n    //     OptionSeries memory series = seriesInfo[_series];\n    //     uint unsettledPercent = openInterest[_series] * 1 ether / totalInterest[_series];\n    //     uint exercisedPercent = (totalInterest[_series] - openInterest[_series]) * 1 ether / totalInterest[_series];\n\n    //     if (series.flavor == Flavor.Call) {\n    //         eth = written * unsettledPercent / 1 ether;\n    //         usd = written * exercisedPercent / 1 ether;\n    //         usd = usd * series.strike / 1 ether;\n    //         return (eth, usd);\n    //     } else {\n    //         usd = written * unsettledPercent / 1 ether;\n    //         usd = usd * series.strike / 1 ether;\n    //         eth = written * exercisedPercent / 1 ether;\n    //         return (eth, usd);\n    //     }\n    // }\n\n    // function settle(address _series) public returns (uint usd) {\n    //     OptionSeries memory series = seriesInfo[_series];\n    //     require(now > series.expiration + DURATION);\n\n    //     uint bal = ERC20(_series).balanceOf(msg.sender);\n    //     VariableSupplyToken(_series).burn(msg.sender, bal);\n\n    //     uint percent = bal * 1 ether / (totalInterest[_series] - earlyExercised[_series]);\n    //     usd = holdersSettlement[_series] * percent / 1 ether;\n    //     usd.transfer(msg.sender, usd);\n    //     return usd;\n    // }\n\n    // // map preference to a discount factor between 0.95 and 1\n    // function discount(address from) public view returns (uint) {\n    //     return (100 ether - _unsLn(preference(from) * 139 + 1 ether)) / 100;\n    // }\n    \n    // // map the quantity between 0 and 3.7% of DSF token supply the user owns\n    // // to between 0 and 1\n    // function preference(address from) public view returns (uint) {\n    //     uint percent = _min(\n    //         protocolToken.balanceOf(from) * 1 ether / protocolToken.totalSupply(),\n    //         PREFERENCE_MAX\n    //     );\n        \n    //     uint normalized = percent * 1 ether / PREFERENCE_MAX;\n    //     return normalized;\n    // }\n\n    // function _min(uint a, uint b) pure public returns (uint) {\n    //     if (a > b)\n    //         return b;\n    //     return a;\n    // }\n\n    // function _max(uint a, uint b) pure public returns (uint) {\n    //     if (a > b)\n    //         return a;\n    //     return b;\n    // }\n    \n    // function _unsLn(uint x) pure public returns (uint log) {\n    //     log = 0;\n        \n    //     // not a true ln function, we can't represent the negatives\n    //     if (x < 1 ether)\n    //         return 0;\n\n    //     while (x >= 1.5 ether) {\n    //         log += 0.405465 ether;\n    //         x = x * 2 / 3;\n    //     }\n        \n    //     x = x - 1 ether;\n    //     uint y = x;\n    //     uint i = 1;\n\n    //     while (i < 10) {\n    //         log += (y / i);\n    //         i = i + 1;\n    //         y = y * x / 1 ether;\n    //         log -= (y / i);\n    //         i = i + 1;\n    //         y = y * x / 1 ether;\n    //     }\n         \n    //     return(log);\n    // }\n}",
  "sourcePath": "/Users/brianwheeler/optimum/protocol/contracts/DSFProtocol.sol",
  "ast": {
    "absolutePath": "/Users/brianwheeler/optimum/protocol/contracts/DSFProtocol.sol",
    "exportedSymbols": {
      "DSFProtocol": [
        5
      ]
    },
    "id": 6,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.5"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:21:0"
      },
      {
        "absolutePath": "/Users/brianwheeler/optimum/protocol/contracts/DSFProtocolTypes.sol",
        "file": "./DSFProtocolTypes.sol",
        "id": 2,
        "nodeType": "ImportDirective",
        "scope": 6,
        "sourceUnit": 9,
        "src": "118:32:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3,
              "name": "DSFProtocolTypes",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 8,
              "src": "212:16:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_DSFProtocolTypes_$8",
                "typeString": "contract DSFProtocolTypes"
              }
            },
            "id": 4,
            "nodeType": "InheritanceSpecifier",
            "src": "212:16:0"
          }
        ],
        "contractDependencies": [
          8
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 5,
        "linearizedBaseContracts": [
          5,
          8
        ],
        "name": "DSFProtocol",
        "nodeType": "ContractDefinition",
        "nodes": [],
        "scope": 6,
        "src": "188:10766:0"
      }
    ],
    "src": "0:10954:0"
  },
  "legacyAST": {
    "absolutePath": "/Users/brianwheeler/optimum/protocol/contracts/DSFProtocol.sol",
    "exportedSymbols": {
      "DSFProtocol": [
        5
      ]
    },
    "id": 6,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.5"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:21:0"
      },
      {
        "absolutePath": "/Users/brianwheeler/optimum/protocol/contracts/DSFProtocolTypes.sol",
        "file": "./DSFProtocolTypes.sol",
        "id": 2,
        "nodeType": "ImportDirective",
        "scope": 6,
        "sourceUnit": 9,
        "src": "118:32:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3,
              "name": "DSFProtocolTypes",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 8,
              "src": "212:16:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_DSFProtocolTypes_$8",
                "typeString": "contract DSFProtocolTypes"
              }
            },
            "id": 4,
            "nodeType": "InheritanceSpecifier",
            "src": "212:16:0"
          }
        ],
        "contractDependencies": [
          8
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 5,
        "linearizedBaseContracts": [
          5,
          8
        ],
        "name": "DSFProtocol",
        "nodeType": "ContractDefinition",
        "nodes": [],
        "scope": 6,
        "src": "188:10766:0"
      }
    ],
    "src": "0:10954:0"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.16+commit.9c3226ce.Emscripten.clang"
  },
  "networks": {
    "42": {
      "events": {},
      "links": {},
      "address": "0x3fF688cf9bCc1aB94E789992d7E82430B8E96848",
      "transactionHash": "0xd252596d5bf581a0cd721c3688b9ddb0d2d1bf80ea00aeb3fd5e818c754959bd"
    },
    "5777": {
      "events": {},
      "links": {},
      "address": "0xb1daC3A86D3e44CaAA2acF68fb9D1010383EFB61",
      "transactionHash": "0x532860e196a74b160231891ddde01d029ddb780b8b09fb5e3018e5498168e2f0"
    }
  },
  "schemaVersion": "3.0.21",
  "updatedAt": "2020-02-06T15:33:53.078Z",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  }
}